/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package View;

import Model.HoaDonChiTiet;
import Repository.HoaDonChiTietRepository;
import Repository.HoaDonRepository;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileOutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.RowFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
import org.apache.poi.ss.usermodel.Row;
import org.apache.poi.ss.usermodel.Workbook;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;

/**
 *
 * @author Vinh
 */
public final class HoaDon extends javax.swing.JPanel {

    /**
     * Creates new form HoaDon
     */
    public HoaDon() {
        initComponents();
        hienThiDanhSachHoaDon(tblHoaDon);
        addTableListener();
        addSearchListener();
        addFilterListener();
        cboLoc.removeAllItems();
        cboLoc.addItem("Tất cả");
        cboLoc.addItem("Chưa thanh toán");
        cboLoc.addItem("Đã thanh toán");
        cboLoc.addItem("Không xác định");
        cboLoc.addItem("Hóa đơn đã bị hủy");
        cboLoc.setSelectedIndex(0);
    }

    private void addTableListener() {
        tblHoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            @Override
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                int selectedRow = tblHoaDon.getSelectedRow(); // Lấy hàng được chọn
                if (selectedRow != -1) { // Nếu hàng được chọn
                    // Lấy giá trị mã hóa đơn từ cột tương ứng
                    String maHoaDon = tblHoaDon.getValueAt(selectedRow, 1).toString().trim(); // Cột 1: Mã hóa đơn

                    // Debug để kiểm tra dữ liệu
                    System.out.println("Mã hóa đơn được chọn: " + maHoaDon);

                    // Gọi phương thức hiển thị chi tiết hóa đơn
                    hienThiHoaDonChiTiet(maHoaDon, tblHoaDonChiTiet);
                }
            }
        });
    }

    private void addSearchListener() {
        txtSearch.addKeyListener(new KeyAdapter() {
            @Override
            public void keyReleased(KeyEvent e) {
                String keyword = txtSearch.getText().trim().toLowerCase(); // Lấy từ khóa người dùng nhập
                DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
                TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
                tblHoaDon.setRowSorter(sorter);

                // Tìm kiếm theo Mã Hóa Đơn hoặc Tên Khách Hàng
                sorter.setRowFilter(RowFilter.regexFilter("(?i)" + keyword, 1, 3)); // Cột 1: Mã Hóa Đơn, Cột 3: Tên Khách Hàng
            }
        });
    }

    private void addFilterListener() {
        cboLoc.addActionListener(e -> {
            Object selectedItem = cboLoc.getSelectedItem(); // Lấy giá trị được chọn
            if (selectedItem == null) {
                return; // Nếu không có giá trị nào được chọn, thoát khỏi sự kiện
            }

            String selectedStatus = selectedItem.toString().trim(); // Chuyển giá trị thành chuỗi
            DefaultTableModel model = (DefaultTableModel) tblHoaDon.getModel();
            TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
            tblHoaDon.setRowSorter(sorter);

            // Lọc theo trạng thái
            if (selectedStatus.equalsIgnoreCase("Tất cả")) {
                sorter.setRowFilter(null); // Hiển thị toàn bộ dữ liệu
            } else {
                sorter.setRowFilter(RowFilter.regexFilter("(?i)" + selectedStatus, 8)); // Cột 8: Trạng Thái
            }
        });
    }

    private String mapTrangThai(byte trangThai) {
        switch (trangThai) {
            case 0:
                return "Chưa thanh toán";
            case 1:
                return "Đã thanh toán";
            case 2:
                return "Bị hủy";
            case 3:
                return "Hóa đơn đã bị hủy";
            default:
                return "Không xác định";
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        txtSearch = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cboLoc = new javax.swing.JComboBox<>();
        jButton1 = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        tblHoaDon = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        tblHoaDonChiTiet = new javax.swing.JTable();

        txtSearch.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                txtSearchMouseClicked(evt);
            }
        });
        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
        });

        jLabel1.setText("Tìm kiếm");

        jLabel2.setText("Lọc");

        cboLoc.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Tất cả", "Đã thanh toán", "Chưa thanh toán" }));

        jButton1.setText("Xuất Excel");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel3.setText("Hóa đơn");

        tblHoaDon.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Ma Hoa Don", "Ma Khach Hang", "Ten Khach Hang", "Dia Chi", "SDT", "Ngay Tao", "Tong Tien", "Trang Thai"
            }
        ));
        tblHoaDon.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHoaDonMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tblHoaDon);

        jLabel4.setText("Hóa đơn chi tiết");

        tblHoaDonChiTiet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "STT", "Ma HDCT", "Ma San Pham", "Ten San Pham", "So Luong", "Don Gia", "Chat Lieu", "Mau Sac", "Kich Thuoc", "Xuat Xu", "Tổng Tiền"
            }
        ));
        tblHoaDonChiTiet.setPreferredSize(new java.awt.Dimension(60, 80));
        tblHoaDonChiTiet.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tblHoaDonChiTietMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(tblHoaDonChiTiet);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3))
                        .addGap(31, 31, 31)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(cboLoc, 0, 151, Short.MAX_VALUE)
                            .addComponent(txtSearch))
                        .addGap(42, 42, 42)
                        .addComponent(jButton1))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(26, 26, 26)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jLabel4)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 910, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))))
                .addContainerGap(47, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(cboLoc, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(28, 28, 28))
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 11, Short.MAX_VALUE)
                .addComponent(jLabel4)
                .addGap(26, 26, 26)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        exportToExcel((DefaultTableModel) tblHoaDon.getModel());
    }//GEN-LAST:event_jButton1ActionPerformed

    private void txtSearchMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_txtSearchMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchMouseClicked

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtSearchKeyPressed

    private void tblHoaDonChiTietMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHoaDonChiTietMouseClicked
        // TODO add your handling code here:

    }//GEN-LAST:event_tblHoaDonChiTietMouseClicked

    private void tblHoaDonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tblHoaDonMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_tblHoaDonMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> cboLoc;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable tblHoaDon;
    private javax.swing.JTable tblHoaDonChiTiet;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables

    public void hienThiDanhSachHoaDon(JTable table) {
        HoaDonRepository repository = new HoaDonRepository();
        List<Model.HoaDon> hoaDonList = repository.getAllWithDetails(); 

        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0); 

        int stt = 1;
        for (Model.HoaDon hoaDon : hoaDonList) {
            Object[] row = {
                stt++,
                hoaDon.getMaHoaDon(), 
                hoaDon.getMaKhachHang(),
                hoaDon.getTenKhachHang(), 
                hoaDon.getDiaChi(), 
                hoaDon.getSoDienThoai(), 
                hoaDon.getNgayTao(), 
                hoaDon.getTongTien(), 
                mapTrangThai(hoaDon.getTrangThai()) 
            };
            model.addRow(row); 
        }
    }

    public void hienThiHoaDonChiTiet(String maHoaDon, JTable table) {
        HoaDonChiTietRepository repository = new HoaDonChiTietRepository();
        List<HoaDonChiTiet> hoaDonChiTietList = repository.getByMaHoaDon(maHoaDon);

        DefaultTableModel model = (DefaultTableModel) table.getModel();
        model.setRowCount(0);

        int stt = 1; 

   
        for (HoaDonChiTiet hoaDonChiTiet : hoaDonChiTietList) {
            Object[] row = {
                stt++,
                hoaDonChiTiet.getMaSanPhamChiTiet(), 
                hoaDonChiTiet.getMaSanPham(), 
                hoaDonChiTiet.getTenSanPham(),
                hoaDonChiTiet.getSoLuong(),
                hoaDonChiTiet.getDonGia(), 
                hoaDonChiTiet.getChatLieu() == null ? "Không xác định" : hoaDonChiTiet.getChatLieu(),
                hoaDonChiTiet.getMauSac() == null ? "Không xác định" : hoaDonChiTiet.getMauSac(),
                hoaDonChiTiet.getKichThuoc() == null ? "Không xác định" : hoaDonChiTiet.getKichThuoc(),
                hoaDonChiTiet.getXuatXu() == null ? "Không xác định" : hoaDonChiTiet.getXuatXu(),
                hoaDonChiTiet.getTongTien()
                  
            };
            model.addRow(row); 
        }

        table.repaint(); 
    }

  
    private void exportToExcel(DefaultTableModel model) {
      JFileChooser fileChooser = new JFileChooser("D:\\anh");
        fileChooser.setDialogTitle("Lưu file Excel");
        fileChooser.setFileFilter(new javax.swing.filechooser.FileNameExtensionFilter("Excel Files", "xlsx"));
        int userSelection = fileChooser.showSaveDialog(this);

        if (userSelection == JFileChooser.APPROVE_OPTION) {
            File fileToSave = fileChooser.getSelectedFile();
        
            if (!fileToSave.getAbsolutePath().endsWith(".xlsx")) {
                fileToSave = new File(fileToSave.getAbsolutePath() + ".xlsx");
            }

            try (Workbook workbook = new XSSFWorkbook()) {
               org.apache.poi.ss.usermodel.Sheet sheet = workbook.createSheet("Danh Sách Hóa Đơn");
                Row headerRow = sheet.createRow(0);
                headerRow.createCell(0).setCellValue("STT");
                headerRow.createCell(1).setCellValue("Mã Hóa Đơn");
                headerRow.createCell(2).setCellValue("Mã Khách Hàng");
                headerRow.createCell(3).setCellValue("Tên Khách Hàng");
                headerRow.createCell(4).setCellValue("Địa Chỉ");
                headerRow.createCell(5).setCellValue("Số Điện Thoại");
                headerRow.createCell(6).setCellValue("Ngày Tạo");
                headerRow.createCell(7).setCellValue("Tổng Tiền");
                headerRow.createCell(8).setCellValue("Trạng Thái");
                for (int i = 0; i < model.getRowCount(); i++) { 
                    Row row = sheet.createRow(i + 1); 
                    row.createCell(0).setCellValue(i + 1); 
                    row.createCell(1).setCellValue(model.getValueAt(i, 0) != null ? model.getValueAt(i, 0).toString() : ""); // Mã Hóa Đơn
                    row.createCell(2).setCellValue(model.getValueAt(i, 1) != null ? model.getValueAt(i, 1).toString() : ""); // Mã Khách Hàng
                    row.createCell(3).setCellValue(model.getValueAt(i, 2) != null ? model.getValueAt(i, 2).toString() : ""); // Tên Khách Hàng
                    row.createCell(4).setCellValue(model.getValueAt(i, 3) != null ? model.getValueAt(i, 3).toString() : ""); // Địa Chỉ
                    row.createCell(5).setCellValue(model.getValueAt(i, 4) != null ? model.getValueAt(i, 4).toString() : ""); // Số Điện Thoại
                    row.createCell(6).setCellValue(model.getValueAt(i, 5) != null ? model.getValueAt(i, 5).toString() : ""); // Ngày Tạo
                    row.createCell(7).setCellValue(model.getValueAt(i, 6) != null ? model.getValueAt(i, 6).toString() : ""); // Tổng Tiền
                    row.createCell(8).setCellValue(model.getValueAt(i, 7) != null ? model.getValueAt(i, 7).toString() : ""); // Trạng Thái
                }

                try (FileOutputStream outputStream = new FileOutputStream(fileToSave)) {
                    workbook.write(outputStream);
                    JOptionPane.showMessageDialog(this, "Xuất Excel danh sách hóa đơn thành công!");
                }
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Lỗi: " + e.getMessage());
            }
        }
    }
}
